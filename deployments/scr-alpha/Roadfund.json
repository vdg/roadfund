{
  "address": "0x2a0428a6aF38045381FD6db4365aFF364153BA88",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "singleton",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHALLENGE_PENALTY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHANNEL_LIMIT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONTEST_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFT_LIMIT",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECLAIM_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_singleton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Rouge",
          "name": "rouge",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "challenge",
          "type": "uint256"
        }
      ],
      "name": "addFeature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Rouge",
          "name": "rouge",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "channelId",
          "type": "uint16"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Rouge",
          "name": "rouge",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "channelId",
          "type": "uint16"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "penaltiesRecipient",
          "type": "address"
        }
      ],
      "name": "createRoadmap",
      "outputs": [
        {
          "internalType": "contract RougeProxy",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Rouge",
          "name": "rouge",
          "type": "address"
        }
      ],
      "name": "getInfos",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "supply",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "totalAcquired",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "totalRedeemed",
              "type": "uint48"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Rouge.Channel[]",
          "name": "channels",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "penaltiesRecipient",
          "type": "address"
        },
        {
          "internalType": "bool[]",
          "name": "open",
          "type": "bool[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "featureURI",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "challenge",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "claimedAt",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16[]",
          "name": "claimedThreshold",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouge",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "singleton",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Rouge",
          "name": "rouge",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "channelId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "qty",
          "type": "uint16"
        }
      ],
      "name": "pledge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "singleton",
          "type": "address"
        }
      ],
      "name": "setRouge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf1bb3670317297e47a3e0007c6c51dd7a5c1e10824df08c4ea56c4ce2fd9d836",
  "receipt": {
    "to": null,
    "from": "0xC2D7FA960519F1536B98e1f5b621c36C50427F90",
    "contractAddress": "0x2a0428a6aF38045381FD6db4365aFF364153BA88",
    "transactionIndex": 16,
    "gasUsed": "2454861",
    "logsBloom": "0x
    "blockHash": "0x36f56bfe47e8aa580c956a71cd785962568d93d4c9a96af84480ce9931559c57",
    "transactionHash": "0xf1bb3670317297e47a3e0007c6c51dd7a5c1e10824df08c4ea56c4ce2fd9d836",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 746797,
        "transactionHash": "0xf1bb3670317297e47a3e0007c6c51dd7a5c1e10824df08c4ea56c4ce2fd9d836",
        "address": "0x2a0428a6aF38045381FD6db4365aFF364153BA88",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c2d7fa960519f1536b98e1f5b621c36c50427f90"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x36f56bfe47e8aa580c956a71cd785962568d93d4c9a96af84480ce9931559c57"
      }
    ],
    "blockNumber": 746797,
    "cumulativeGasUsed": "4009779",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA6e904D88370D25e8Af3c6Eec7ecdD23a8d8BC83",
    "0x90713Dd7F05361317b2aBb5E5998b819099dDFaf"
  ],
  "numDeployments": 1,
  "solcInputHash": "bbc562ab54dfee492c3534eae8442e58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGE_PENALTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHANNEL_LIMIT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTEST_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_LIMIT\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECLAIM_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_singleton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Rouge\",\"name\":\"rouge\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challenge\",\"type\":\"uint256\"}],\"name\":\"addFeature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Rouge\",\"name\":\"rouge\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"channelId\",\"type\":\"uint16\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Rouge\",\"name\":\"rouge\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"channelId\",\"type\":\"uint16\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"penaltiesRecipient\",\"type\":\"address\"}],\"name\":\"createRoadmap\",\"outputs\":[{\"internalType\":\"contract RougeProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Rouge\",\"name\":\"rouge\",\"type\":\"address\"}],\"name\":\"getInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"supply\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"totalAcquired\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"totalRedeemed\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Rouge.Channel[]\",\"name\":\"channels\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"penaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"bool[]\",\"name\":\"open\",\"type\":\"bool[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"featureURI\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"challenge\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimedAt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"claimedThreshold\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Rouge\",\"name\":\"rouge\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"channelId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"qty\",\"type\":\"uint16\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"}],\"name\":\"setRouge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Roadfund.sol\":\"Roadfund\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":3000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@rougenetwork/v2-core/contracts/Rouge.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./proxies/Singleton.sol\\\";\\nimport \\\"./modules/UseCertificate.sol\\\";\\nimport \\\"./modules/UseStampProof.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n//import \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n//import \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\ncontract Rouge is Singleton, ERC721, UseCertificate, UseStampProof {\\n    using Address for address payable;\\n\\n    string public constant VERSION = \\\"2.0.0\\\";\\n\\n    uint256 public constant NFT_LIMIT = ~uint48(0); // 281,474,976,710,655\\n    uint16 public constant CHANNEL_LIMIT = ~uint16(0); // 65,535\\n    uint256 public constant ACQUISITION_LIMIT = ~uint16(0); // 65,535 per batch\\n\\n    // uint48 to be less than js 2^53 safe integer\\n    uint48 private _nextTokenId;\\n\\n    bool private ready = false;\\n\\n    string public URI;\\n\\n    constructor() ERC721(\\\"Rouge NFT\\\", \\\"RGN\\\") {\\n        // master copy is not usable\\n        ready = true;\\n    }\\n\\n    struct Authorization {\\n        address account;\\n        bytes4 selector;\\n        uint16[] channels;\\n        bool grant;\\n    }\\n\\n    struct Role {\\n        mapping(uint16 => mapping(address => bool)) scope;\\n    }\\n\\n    mapping (bytes4 => Role) private _role;\\n\\n    function hasRole(address account, bytes4 selector, uint16 channelId) view public returns (bool) {\\n        if (_role[selector].scope[channelId][account]) return true;\\n        if (channelId != CHANNEL_LIMIT) return hasRole(account, selector, CHANNEL_LIMIT);\\n        return false;\\n    }\\n\\n    function isEnabled(bytes4 selector, uint16 channelId) view public returns (bool) {\\n        return hasRole(address(0), selector, channelId);\\n    }\\n\\n    struct Channel {\\n        // uint256 type; ? to change on chain behavior\\n        uint48 supply; // keep issuance ? NFT_LIMIT = inf\\n        uint48 totalAcquired;\\n        uint48 totalRedeemed;\\n        address token; // should support ERC20, ERC721, ERC1155\\n        uint256 amount;\\n    }\\n\\n    Channel[] private _channel;\\n\\n    event AddedChannel(uint16 indexed channelId, uint48 supply, uint256 amount);\\n\\n    function addChannels(Channel[] memory channel) public {\\n\\n        // require(!ready || true);\\n        require(channel.length > 0);\\n        require(_channel.length + channel.length < CHANNEL_LIMIT);\\n\\n        for (uint16 i = 0; i < channel.length; i++) {\\n\\n            require(isEnabled(this.addChannels.selector, CHANNEL_LIMIT), \\\"not enabled\\\");\\n            require(!ready || hasRole(_msgSender(), this.addChannels.selector, CHANNEL_LIMIT), \\\"not authorized\\\");\\n\\n            // XXX allow non zero starting channel ?\\n            channel[i].totalAcquired = 0;\\n            channel[i].totalRedeemed = 0;\\n\\n            _channel.push(channel[i]);\\n\\n            emit AddedChannel(\\n                              uint16(_channel.length - 1),\\n                              channel[i].supply,\\n                              channel[i].amount\\n            );\\n        }\\n    }\\n\\n    event UpdateAuthorization(address indexed account, bytes4 indexed selector, uint16 indexed channelId, bool grant);\\n\\n    function updateAuthorizations(Authorization[] memory auth) public {\\n\\n        for (uint256 i = 0; i < auth.length; i++) {\\n\\n            // per channel grant\\n            if (auth[i].channels.length > 0) {\\n                for (uint16 j = 0; j < auth[i].channels.length; j++) {\\n\\n                    require(isEnabled(this.updateAuthorizations.selector, auth[i].channels[j]), \\\"not enabled\\\");\\n                    require(!ready || hasRole(_msgSender(), this.updateAuthorizations.selector, auth[i].channels[j]), \\\"not authorized\\\");\\n\\n                    _role[auth[i].selector].scope[auth[i].channels[j]][auth[i].account] = auth[i].grant;\\n                    emit UpdateAuthorization(\\n                                    auth[i].account,\\n                                    auth[i].selector,\\n                                    auth[i].channels[j],\\n                                    auth[i].grant\\n                                    );\\n                }\\n\\n            }\\n        }\\n    }\\n\\n    event ProjectSetup(address creator, address manager, string URI);\\n\\n    function setup(address manager, string calldata URI_, Channel[] memory channel, Authorization[] memory auth) external {\\n        require(!ready);\\n        URI = URI_;\\n        _nextTokenId = 1;\\n\\n        // all selector enable except acquire/redeem\\n        _role[this.addChannels.selector].scope[CHANNEL_LIMIT][address(0)] = true;\\n        _role[this.updateAuthorizations.selector].scope[CHANNEL_LIMIT][address(0)] = true;\\n        _role[this.widthdraw.selector].scope[CHANNEL_LIMIT][address(0)] = true;\\n        _role[this.widthdrawToken.selector].scope[CHANNEL_LIMIT][address(0)] = true;\\n        _role[this.approveToken.selector].scope[CHANNEL_LIMIT][address(0)] = true;\\n\\n        // default all roles for manager\\n        _role[this.addChannels.selector].scope[CHANNEL_LIMIT][manager] = true;\\n        _role[this.updateAuthorizations.selector].scope[CHANNEL_LIMIT][manager] = true;\\n        _role[this.widthdraw.selector].scope[CHANNEL_LIMIT][manager] = true;\\n        _role[this.widthdrawToken.selector].scope[CHANNEL_LIMIT][manager] = true;\\n        _role[this.approveToken.selector].scope[CHANNEL_LIMIT][manager] = true;\\n        _role[this.redeem.selector].scope[CHANNEL_LIMIT][manager] = true;\\n\\n        if (channel.length > 0) addChannels(channel);\\n        if (auth.length > 0) updateAuthorizations(auth);\\n        ready = true;\\n\\n        emit ProjectSetup(msg.sender, manager, URI);\\n\\n        // console.log('NFT_LIMIT', NFT_LIMIT);\\n        // console.log('CHANNEL_LIMIT', CHANNEL_LIMIT);\\n    }\\n\\n    // issuance channel => code ticket\\n    // Label -  Standard Rate, Early Bird, VIP, etc    // => add in meta ?\\n    // Quota/Max/supply\\n    // token => contract 0 means gas\\n\\n    struct NFT { // XXX more packing ?\\n        uint16 channelId;\\n        bytes16 stamp;\\n        bool redeemed;\\n        bool repudiated;\\n    }\\n\\n    mapping (uint48 => NFT) private _nft;\\n\\n    event Acquired(uint48 indexed tokenId, bytes16 stamp, uint256 salt, uint24 index);\\n\\n    function _acquire(address account, uint16 channelId, bytes16 stamp, uint256 salt, uint24 index) private {\\n        _nft[_nextTokenId] = NFT({\\n            channelId: channelId,\\n            stamp: stamp,\\n            redeemed: false,\\n            repudiated: false\\n        });\\n\\n        _mint(account, _nextTokenId);\\n\\n        emit Acquired(_nextTokenId, stamp, salt, index);\\n\\n        _nextTokenId++;\\n    }\\n\\n    struct Acquisition {\\n        uint16 channelId;\\n        uint16 qty;\\n        uint256 salt;\\n        bytes16[] stamps;\\n        // other behavior ...\\n    }\\n\\n    // todo airdrop ?\\n\\n    function _payToken(address token, uint256 amount) private {\\n        // XXX check interface\\n        // TODO possibility to have collector address\\n        require(IERC20(token).transferFrom(_msgSender(), address(this), amount));\\n    }\\n\\n    // too much duplicate with Transfer ... ?\\n    // event Acquired(address bearer, uint256 indexed tokenId);\\n\\n    function acquire(Acquisition[] memory acquisitions) payable public {\\n        uint24 index = 1;\\n        uint256 value = msg.value;\\n\\n        for (uint16 i = 0; i < acquisitions.length; i++) {\\n            require(_channel.length > acquisitions[i].channelId);\\n            require(isEnabled(this.acquire.selector, acquisitions[i].channelId), \\\"not enabled\\\");\\n\\n            // revert all acquisitions if not enough supply in one\\n            require(_channel[acquisitions[i].channelId].supply >= _channel[acquisitions[i].channelId].totalAcquired + acquisitions[i].qty, \\\"supply exhausted\\\");\\n\\n            // console.log(\\\"\\\\n[acquire] %s * channel %s\\\", acquisitions[i].qty, acquisitions[i].channelId);\\n\\n            for (uint16 j = 0; j < acquisitions[i].qty; j++) {\\n\\n                bytes16 stamp = acquisitions[i].stamps.length > j ? acquisitions[i].stamps[j] : bytes16(0);\\n\\n                _acquire(_msgSender(), acquisitions[i].channelId, stamp, acquisitions[i].salt, index);\\n\\n                index++;\\n            }\\n\\n            if (_channel[acquisitions[i].channelId].amount > 0) {\\n\\n                if (_channel[acquisitions[i].channelId].token == address(0)) {\\n                    require(value >= _channel[acquisitions[i].channelId].amount * acquisitions[i].qty, 'no enough funding');\\n                    // xxx uncheck\\n                    value -= _channel[acquisitions[i].channelId].amount * acquisitions[i].qty;\\n                } else {\\n                    _payToken(_channel[acquisitions[i].channelId].token, _channel[acquisitions[i].channelId].amount * acquisitions[i].qty);\\n                }\\n            }\\n\\n            _channel[acquisitions[i].channelId].totalAcquired += acquisitions[i].qty;\\n        }\\n    }\\n\\n    // TODO reset stamp (transfer or lost proof)\\n\\n    struct Redemption {\\n        uint16 tokenId;\\n        bytes32 proof;\\n        SignedCertificate certificate;\\n    }\\n\\n    event Redeemed(address bearer, uint48 indexed tokenId);\\n\\n    function _acceptanceFromIssuer(Redemption memory redemption, bytes4 selector) private view returns (bool) {\\n        if (hasRole(_msgSender(), selector, _nft[redemption.tokenId].channelId)) return true;\\n\\n        // we have a matching certificate\\n        if (redemption.certificate.tokenId == redemption.tokenId\\n            && redemption.certificate.memorandum.selector == selector\\n            && hasRole(redemption.certificate.from, selector, _nft[redemption.tokenId].channelId)\\n            ) {\\n            if (isValid(redemption.certificate)) return true;\\n        }\\n\\n        // TODO use delegation\\n        return false;\\n    }\\n\\n    function validTokenProof(uint16 tokenId, bytes32 proof) public view returns (bool) {\\n        return validProof(_nft[tokenId].stamp, proof);\\n    }\\n\\n    function _acceptanceFromBearer(Redemption memory redemption, bytes4 selector) private view returns (bool) {\\n        // always ok when tx.from is bearer\\n        if (ownerOf(redemption.tokenId) == _msgSender()) return true;\\n\\n        // we have a matching certificate\\n        if (redemption.certificate.tokenId == redemption.tokenId\\n            && redemption.certificate.memorandum.selector == selector) {\\n            // ok if valid & signed by rightful nft owner\\n            if (redemption.certificate.from == ownerOf(redemption.tokenId) && isValid(redemption.certificate)) return true;\\n        }\\n\\n        return validTokenProof(redemption.tokenId, redemption.proof);\\n    }\\n\\n    //  XXX add signature barrier before redemption => ? eg POA\\n    function redeem(Redemption[] memory redemptions) public {\\n        for (uint16 i = 0; i < redemptions.length; i++) {\\n            require(redemptions[i].tokenId < _nextTokenId);\\n            require(isEnabled(this.redeem.selector, _nft[redemptions[i].tokenId].channelId), \\\"not enabled\\\");\\n\\n            // XXX many redeem per nft possible ?\\n            require(!_nft[redemptions[i].tokenId].redeemed);\\n\\n            require(_acceptanceFromIssuer(redemptions[i], this.redeem.selector), \\\"not authorized by issuer\\\");\\n            require(_acceptanceFromBearer(redemptions[i], this.redeem.selector), \\\"not authorized by bearer\\\");\\n\\n            // option to burn NFT Rule X burn and supply++;\\n\\n            // XXX assets requirement on redeem, donation, pool incentive ?\\n            _nft[redemptions[i].tokenId].redeemed = true;\\n            _channel[_nft[redemptions[i].tokenId].channelId].totalRedeemed++;\\n            emit Redeemed(ownerOf(redemptions[i].tokenId), redemptions[i].tokenId);\\n        }\\n    }\\n\\n    function getRoles(bytes4[] memory selectors, address account) public view returns (bool[][] memory roles) {\\n        bool[][] memory r = new bool[][](_channel.length + 1);\\n\\n        for (uint16 i = 0; i < _channel.length; i++) {\\n            bool[] memory s = new bool[](selectors.length);\\n            for (uint16 j = 0; j < selectors.length; j++) {\\n                s[j] = _role[selectors[j]].scope[i][account];\\n            }\\n            r[i] = s;\\n        }\\n        bool[] memory s = new bool[](selectors.length);\\n        for (uint16 j = 0; j < selectors.length; j++) {\\n            s[j] = _role[selectors[j]].scope[CHANNEL_LIMIT][account];\\n        }\\n        r[_channel.length] = s;\\n        roles = r;\\n    }\\n    //_role[this.addChannels.selector].scope[CHANNEL_LIMIT][address(0)] = true;\\n\\n    function getInfos() public view returns (string memory uri, Channel[] memory channels, uint256[] memory balances) {\\n        uri = URI;\\n        channels = _channel;\\n        uint256[] memory balances_ = new uint256[](_channel.length);\\n\\n        for (uint16 i = 0; i < _channel.length; i++) {\\n            if (_channel[i].amount > 0) {\\n                if (_channel[i].token == address(0)) {\\n                    balances_[i] = address(this).balance;\\n                } else {\\n                    // XXX use try ?\\n                    //console.log('checking balance', i, _channel[i].token, balance);\\n                    balances_[i] = IERC20(_channel[i].token).balanceOf(address(this));\\n                }\\n            }\\n        }\\n        balances = balances_;\\n    }\\n\\n\\n    function getTokenInfos(uint48 tokenId) public view\\n        returns (address owner, uint16 channelId, bytes16 stamp, bool redeemed, uint256 nextTokenId) {\\n        owner = ownerOf(tokenId);\\n        channelId = _nft[tokenId].channelId;\\n        stamp = _nft[tokenId].stamp;\\n        redeemed = _nft[tokenId].redeemed;\\n        nextTokenId = _nextTokenId;\\n    }\\n\\n    // TODO onchain json + image from contract + metadata updates in the future\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        // TODO level 1, better attributes and link to dapp\\n        return URI;\\n    }\\n\\n    function widthdraw(address payable to, uint256 amount) external {\\n        require(isEnabled(this.widthdraw.selector, CHANNEL_LIMIT), \\\"not enabled\\\");\\n        require(hasRole(_msgSender(), this.widthdraw.selector, CHANNEL_LIMIT));\\n        to.sendValue(amount);\\n    }\\n\\n    function approveToken(address token, address spender, uint256 amount) external {\\n        require(isEnabled(this.approveToken.selector, CHANNEL_LIMIT), \\\"not enabled\\\");\\n        require(hasRole(_msgSender(), this.approveToken.selector, CHANNEL_LIMIT));\\n        IERC20(token).approve(spender, amount);\\n    }\\n\\n    // XXX or approveToken enough ?\\n    function widthdrawToken(\\n                            address token,\\n                            address to,\\n                            uint256 amount\\n                            ) external {\\n        require(isEnabled(this.widthdrawToken.selector, CHANNEL_LIMIT), \\\"not enabled\\\");\\n        require(hasRole(_msgSender(), this.widthdrawToken.selector, CHANNEL_LIMIT));\\n        IERC20(token).transfer(to, amount);\\n    }\\n\\n    // TODO attachments erc20 + erc721 as module ?\\n}\\n\",\"keccak256\":\"0xd67fba2783fbaaf3dcc01de0d7d8ee1da40080e14446855d610c1b81d6c0f0ba\",\"license\":\"AGPL-3.0\"},\"@rougenetwork/v2-core/contracts/modules/UseCertificate.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract UseCertificate {\\n\\n    struct Memorandum {\\n        bytes4 selector;\\n        uint32 expire;\\n    }\\n\\n    struct Certificate {\\n        address from;\\n        uint48 tokenId;\\n        Memorandum memorandum;\\n    }\\n\\n    struct SignedCertificate {\\n        address from;\\n        uint48 tokenId;\\n        Memorandum memorandum;\\n        bytes32 sigR;\\n        bytes32 sigS;\\n        uint8 sigV;\\n    }\\n\\n    string private constant EIP712_DOMAIN  = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n    string private constant MEMORANDUM_TYPE = \\\"Memorandum(bytes4 selector,uint32 expire)\\\";\\n    string private constant CERTIFICAT_TYPE = \\\"Certificate(address from,uint48 tokenId,Memorandum memorandum)Memorandum(bytes4 selector,uint32 expire)\\\";\\n\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(EIP712_DOMAIN));\\n    bytes32 private constant MEMORANDUM_TYPEHASH = keccak256(abi.encodePacked(MEMORANDUM_TYPE));\\n    bytes32 private constant CERTIFICAT_TYPEHASH = keccak256(abi.encodePacked(CERTIFICAT_TYPE));\\n\\n    // keeep public ?\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function separator() private view returns (bytes32) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        return keccak256(abi.encode(\\n            EIP712_DOMAIN_TYPEHASH,\\n            keccak256(\\\"Rouge\\\"),\\n            keccak256(\\\"2\\\"), // string version\\n            getChainId(),\\n            address(this)\\n        ));\\n    }\\n\\n    function hashMemorandum(Memorandum memory memorandum) private pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MEMORANDUM_TYPEHASH,\\n            memorandum.selector,\\n            memorandum.expire\\n        ));\\n    }\\n\\n    function hashCertificate(Certificate memory message) private view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                separator(),\\n                keccak256(abi.encode(\\n                    CERTIFICAT_TYPEHASH,\\n                    message.from,\\n                    message.tokenId,\\n                    hashMemorandum(message.memorandum)\\n                ))\\n            ));\\n    }\\n\\n    function isValidSignature(SignedCertificate memory signed) public view returns (bool) {\\n        return ecrecover(\\n                         hashCertificate(Certificate({\\n                                 from: signed.from,\\n                                 tokenId: signed.tokenId,\\n                                 memorandum: signed.memorandum\\n                                 })\\n                             ), signed.sigV, signed.sigR, signed.sigS\\n                         ) == signed.from;\\n    }\\n\\n    function isValid(SignedCertificate memory signed) public view returns (bool) {\\n        // there is an expiration date\\n        if (signed.memorandum.expire > 0 && block.timestamp > signed.memorandum.expire) {\\n            // console.log(\\\"[warn] expired certificate\\\");\\n            return false;\\n        }\\n        return isValidSignature(signed);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x280522e080f6cffe95fcdf1ed42977670b341f31e8cd3591039e974678aa58ed\",\"license\":\"AGPL-3.0\"},\"@rougenetwork/v2-core/contracts/modules/UseStampProof.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract UseStampProof {\\n\\n    // brute force is 128-bit\\n    function validProof(bytes16 stamp, bytes32 proof) public pure returns (bool valid) {\\n        return (bytes32(stamp) == keccak256(abi.encodePacked(proof)) >> 128 << 128);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcfc7de01d4aa00d0da094fa9367bb152013ddd65a238e3e4e1c8a68f7f6a72ca\",\"license\":\"AGPL-3.0\"},\"@rougenetwork/v2-core/contracts/proxies/IProxyCreationCallback.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"./RougeProxy.sol\\\";\\n\\ninterface IProxyCreationCallback {\\n    function proxyCreated(\\n        RougeProxy proxy,\\n        address _singleton,\\n        bytes calldata initializer,\\n        uint256 saltNonce\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9acac99b09bc427ee97623bae4b0038be614d375a7ab13c0c404c2b3b710e6af\",\"license\":\"LGPL-3.0-only\"},\"@rougenetwork/v2-core/contracts/proxies/RougeProxy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\\n/// @author Richard Meissner - <richard@gnosis.io>\\ninterface IProxy {\\n    function masterCopy() external view returns (address);\\n}\\n\\n/// @title RougeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract RougeProxy {\\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\\n    address internal singleton;\\n\\n    /// @dev Constructor function sets address of singleton contract.\\n    /// @param _singleton Singleton address.\\n    constructor(address _singleton) {\\n        require(_singleton != address(0), \\\"Invalid singleton address provided\\\");\\n        singleton = _singleton;\\n    }\\n\\n    /// @dev Fallback function forwards all transactions and returns all received return data.\\n    fallback() external payable {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\\n            // 0xa619486e == keccak(\\\"masterCopy()\\\"). The value is right padded to 32-bytes with 0s\\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\\n                mstore(0, _singleton)\\n                return(0, 0x20)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if eq(success, 0) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1327f2df8d107396942fa7e7da51aeebd62300482626aac24e59d78b1b08d88b\",\"license\":\"LGPL-3.0-only\"},\"@rougenetwork/v2-core/contracts/proxies/RougeProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./RougeProxy.sol\\\";\\nimport \\\"./IProxyCreationCallback.sol\\\";\\n\\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n/// @author Stefan George - <stefan@gnosis.pm>\\ncontract RougeProxyFactory {\\n    event ProxyCreation(RougeProxy proxy, address singleton);\\n\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n    /// @param singleton Address of singleton contract.\\n    /// @param data Payload for message call sent to new proxy contract.\\n    function createProxy(address singleton, bytes memory data) public returns (RougeProxy proxy) {\\n        proxy = new RougeProxy(singleton);\\n\\n        if (data.length > 0)\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\\n                    revert(0, 0)\\n                }\\n            }\\n        emit ProxyCreation(proxy, singleton);\\n    }\\n\\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\\n    function proxyRuntimeCode() public pure returns (bytes memory) {\\n        return type(RougeProxy).runtimeCode;\\n    }\\n\\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\\n    function proxyCreationCode() public pure returns (bytes memory) {\\n        return type(RougeProxy).creationCode;\\n    }\\n\\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\\n    ///      This method is only meant as an utility to be called from other methods\\n    /// @param _singleton Address of singleton contract.\\n    /// @param initializer Payload for message call sent to new proxy contract.\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n    function deployProxyWithNonce(\\n        address _singleton,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) internal returns (RougeProxy proxy) {\\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\\n        bytes memory deploymentData = abi.encodePacked(type(RougeProxy).creationCode, uint256(uint160(_singleton)));\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\\n        }\\n        require(address(proxy) != address(0), \\\"Create2 call failed\\\");\\n    }\\n\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\n    /// @param _singleton Address of singleton contract.\\n    /// @param initializer Payload for message call sent to new proxy contract.\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n    function createProxyWithNonce(\\n        address _singleton,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) public returns (RougeProxy proxy) {\\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\\n        if (initializer.length > 0)\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\\n                    revert(0, 0)\\n                }\\n            }\\n        emit ProxyCreation(proxy, _singleton);\\n    }\\n\\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\\n    /// @param _singleton Address of singleton contract.\\n    /// @param initializer Payload for message call sent to new proxy contract.\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n    /// @param callback Callback that will be invoked after the new proxy contract has been successfully deployed and initialized.\\n    function createProxyWithCallback(\\n        address _singleton,\\n        bytes memory initializer,\\n        uint256 saltNonce,\\n        IProxyCreationCallback callback\\n    ) public returns (RougeProxy proxy) {\\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\\n    }\\n\\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\\n    /// @param _singleton Address of singleton contract.\\n    /// @param initializer Payload for message call sent to new proxy contract.\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n    function calculateCreateProxyWithNonceAddress(\\n        address _singleton,\\n        bytes calldata initializer,\\n        uint256 saltNonce\\n    ) external returns (RougeProxy proxy) {\\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\\n        revert(string(abi.encodePacked(proxy)));\\n    }\\n}\\n\",\"keccak256\":\"0xdafe708edab9269cee374b3869302a6d7f49c10c3d896bdfb836ea2022e825cc\",\"license\":\"LGPL-3.0-only\"},\"@rougenetwork/v2-core/contracts/proxies/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Singleton - Base for singleton contracts (should always be first super contract)\\n/// This contract is tightly coupled to our proxy contract (see `proxies/GnosisSafeProxy.sol`)\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract Singleton {\\n    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\\n    // It should also always be ensured that the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\",\"keccak256\":\"0xc085aed60db1345d71c2cca80619043b6c910313b52fd845f5e050b312a06fa2\",\"license\":\"LGPL-3.0-only\"},\"contracts/Roadfund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n//import 'hardhat/console.sol';\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport '@rougenetwork/v2-core/contracts/Rouge.sol';\\nimport '@rougenetwork/v2-core/contracts/proxies/RougeProxyFactory.sol';\\nimport '@rougenetwork/v2-core/contracts/proxies/RougeProxy.sol';\\n\\n// Roadfund contract that extends Ownable from OpenZeppelin\\ncontract Roadfund is Ownable {\\n  using Address for address payable;\\n\\n  address public _factory;\\n  address public _singleton;\\n\\n  uint48 public constant NFT_LIMIT = ~uint48(0); // 281,474,976,710,655\\n  uint16 public constant CHANNEL_LIMIT = ~uint16(0); // 65,535\\n\\n  // the 3 constants below gouvern the game theory of the contract\\n\\n  // Percentage of challenge pledges to be given back as a penalty when closing a feature\\n  uint256 public constant CHALLENGE_PENALTY = 150;\\n\\n  // limit for a substantially challenged feature to be considered contested\\n  uint256 public constant CONTEST_LIMIT = 12;\\n\\n  // Percentage of the challenge pledges to keep in the next claim cycle\\n  uint256 public constant RECLAIM_THRESHOLD = 33;\\n\\n  // Set Rouge factory and singleton addresses\\n  function setRouge(address factory, address singleton) public onlyOwner {\\n    _factory = factory;\\n    _singleton = singleton;\\n  }\\n\\n  function getRouge() public view returns (address factory, address singleton) {\\n    factory = _factory;\\n    singleton = _singleton;\\n  }\\n\\n  // Constructor to initialize factory and singleton addresses\\n  constructor(address factory, address singleton) {\\n    setRouge(factory, singleton);\\n  }\\n\\n  uint256 private _nonce;\\n\\n  mapping(Rouge => address payable) private _creator;\\n  mapping(Rouge => address payable) private _penaltiesRecipient;\\n\\n  // Function to create a new roadmap (Rouge instance)\\n  function createRoadmap(\\n    string memory uri,\\n    address payable penaltiesRecipient\\n  ) public returns (RougeProxy proxy) {\\n    _nonce += 1;\\n\\n    // Create special admin authorization for the message sender\\n    uint16[] memory channels = new uint16[](1);\\n    channels[0] = CHANNEL_LIMIT;\\n    Rouge.Authorization[] memory auths = new Rouge.Authorization[](1);\\n    auths[0] = Rouge.Authorization({\\n      account: _msgSender(),\\n      selector: this.createRoadmap.selector,\\n      channels: channels,\\n      grant: true\\n    });\\n\\n    // Create a RougeProxy instance and set up the initial state\\n    proxy = RougeProxyFactory(_factory).createProxyWithNonce(\\n      _singleton,\\n      abi.encodePacked(\\n        Rouge.setup.selector,\\n        abi.encode(address(this), uri, new Rouge.Channel[](0), auths)\\n      ),\\n      _nonce\\n    );\\n\\n    _creator[Rouge(address(proxy))] = payable(_msgSender());\\n    _penaltiesRecipient[Rouge(address(proxy))] = penaltiesRecipient;\\n\\n    return proxy;\\n  }\\n\\n  // Internal function to grant or revoke the acquire authorization for a specific feature\\n  function grantFeature(Rouge rouge, uint16 channelId, bool grant) internal {\\n    uint16[] memory channels = new uint16[](1);\\n    channels[0] = channelId;\\n    Rouge.Authorization[] memory auths = new Rouge.Authorization[](1);\\n    auths[0] = Rouge.Authorization({\\n      account: address(0),\\n      selector: rouge.acquire.selector,\\n      channels: channels,\\n      grant: grant\\n    });\\n    rouge.updateAuthorizations(auths);\\n  }\\n\\n  // Mappings to store feature information\\n  mapping(Rouge => mapping(uint16 => string)) private _featureName;\\n  mapping(Rouge => mapping(uint16 => string)) private _featureURI;\\n  mapping(Rouge => mapping(uint16 => uint256))\\n    private _featureChallengeDuration;\\n\\n  // Function to add a new feature to a roadmap (Rouge instance)\\n  function addFeature(\\n    Rouge rouge,\\n    string memory name,\\n    string memory uri,\\n    uint256 amount,\\n    uint256 challenge\\n  ) public {\\n    (, Rouge.Channel[] memory channels, ) = rouge.getInfos();\\n\\n    // Check if the message sender is the roadmap creator\\n    require(\\n      rouge.hasRole(_msgSender(), this.createRoadmap.selector, CHANNEL_LIMIT)\\n    );\\n\\n    // Add a new channel for the feature\\n    Rouge.Channel[] memory newChannels = new Rouge.Channel[](1);\\n    newChannels[0] = Rouge.Channel({\\n      supply: NFT_LIMIT,\\n      totalAcquired: 0,\\n      totalRedeemed: 0,\\n      token: address(0),\\n      amount: amount\\n    });\\n    rouge.addChannels(newChannels);\\n\\n    // Grant the acquire authorization for the new feature\\n    grantFeature(rouge, uint16(channels.length), true);\\n\\n    // Store the feature name, uri and challenge duration\\n    _featureName[rouge][uint16(channels.length)] = name;\\n    _featureURI[rouge][uint16(channels.length)] = uri;\\n    _featureChallengeDuration[rouge][uint16(channels.length)] = challenge;\\n  }\\n\\n  // Mappings to store pledge information\\n  // XXX future optimisation, use total acquired only ?\\n  mapping(Rouge => mapping(uint16 => uint16)) private _pledges;\\n\\n  // Function to pledge funds to a specific feature\\n  function pledge(Rouge rouge, uint16 channelId, uint16 qty) public payable {\\n    Rouge.Acquisition[] memory pledges = new Rouge.Acquisition[](1);\\n    pledges[0] = Rouge.Acquisition({\\n      channelId: channelId,\\n      qty: qty,\\n      salt: 0,\\n      stamps: new bytes16[](0)\\n    });\\n\\n    // Acquire the pledged tokens\\n    rouge.acquire{ value: msg.value }(pledges);\\n\\n    // Update the internal pledge mapping\\n    _pledges[rouge][channelId] += qty;\\n  }\\n\\n  // Mappings to store claim information\\n  mapping(Rouge => mapping(uint16 => uint256)) private _claimedAt;\\n  mapping(Rouge => mapping(uint16 => uint16)) private _claimedThreshold;\\n\\n  // Function to claim funds for a specific feature\\n  function claim(Rouge rouge, uint16 channelId) public {\\n    // Check if the message sender is the roadmap creator\\n    require(\\n      rouge.hasRole(_msgSender(), this.createRoadmap.selector, CHANNEL_LIMIT),\\n      'not creator'\\n    );\\n\\n    // Ensure the feature is not claimed or the challenge duration has passed\\n    require(\\n      _claimedAt[rouge][channelId] == 0 ||\\n        block.timestamp - _claimedAt[rouge][channelId] >=\\n        _featureChallengeDuration[rouge][channelId],\\n      'not claimable'\\n    );\\n\\n    _claimedAt[rouge][channelId] = block.timestamp;\\n\\n    if (_claimedThreshold[rouge][channelId] > 0) {\\n      // raising threshold a bit so feature may be closed again, but new challenge duration start and easier to re-contest\\n      _claimedThreshold[rouge][channelId] =\\n        _claimedThreshold[rouge][channelId] +\\n        ((_pledges[rouge][channelId] - _claimedThreshold[rouge][channelId]) *\\n          uint16(RECLAIM_THRESHOLD)) /\\n        100;\\n    } else {\\n      _claimedThreshold[rouge][channelId] = _pledges[rouge][channelId];\\n    }\\n  }\\n\\n  // Function to close a specific feature and withdraw funds\\n  function close(Rouge rouge, uint16 channelId) public payable {\\n    // Check if the message sender is the roadmap creator\\n    require(\\n      rouge.hasRole(_msgSender(), this.createRoadmap.selector, CHANNEL_LIMIT)\\n    );\\n\\n    // Ensure the feature is claimed and the challenge duration has passed\\n    require(_claimedAt[rouge][channelId] > 0, 'not claimed');\\n    require(\\n      block.timestamp - _claimedAt[rouge][channelId] >=\\n        _featureChallengeDuration[rouge][channelId],\\n      'not time'\\n    );\\n\\n    uint16 challengePledges = _pledges[rouge][channelId] -\\n      _claimedThreshold[rouge][channelId];\\n\\n    // if (_pledges[rouge][channelId] > 0) {\\n    //   console.log(\\n    //               'challengePledges = %s (%s%%)',\\n    //               challengePledges,\\n    //               (100 * challengePledges) / _pledges[rouge][channelId]\\n    //               );\\n    // }\\n\\n    // Refuse to close contested features\\n    require(\\n      _pledges[rouge][channelId] == 0 ||\\n        (100 * challengePledges) / _pledges[rouge][channelId] < CONTEST_LIMIT,\\n      'contested'\\n    );\\n\\n    (, Rouge.Channel[] memory channels, ) = rouge.getInfos();\\n\\n    // Require penalty payment for closing the feature if challengePledges exist\\n    require(\\n      msg.value >=\\n        ((challengePledges * CHALLENGE_PENALTY) / 100) *\\n          channels[channelId].amount,\\n      'penalty unpaid'\\n    );\\n\\n    // Transfer the penalty payment (or tip) to the penalties recipient\\n    if (msg.value > 0) {\\n      _penaltiesRecipient[rouge].sendValue(msg.value);\\n    }\\n\\n    // Withdraw funds to the message sender\\n    rouge.widthdraw(\\n      payable(_msgSender()),\\n      _pledges[rouge][channelId] * channels[channelId].amount\\n    );\\n\\n    // Revoke the acquire authorization for the closed feature\\n    grantFeature(rouge, channelId, false);\\n  }\\n\\n  // Function to get all local state for a roadmap\\n  function getFeatures(\\n    Rouge rouge,\\n    uint256 max\\n  )\\n    internal\\n    view\\n    returns (\\n      string[] memory names,\\n      string[] memory featureURI,\\n      uint256[] memory challenge\\n    )\\n  {\\n    string[] memory names_ = new string[](max);\\n    string[] memory uri_ = new string[](max);\\n    uint256[] memory challenge_ = new uint256[](max);\\n\\n    for (uint16 i = 0; i < max; i++) {\\n      names_[i] = _featureName[rouge][i];\\n      uri_[i] = _featureURI[rouge][i];\\n      challenge_[i] = _featureChallengeDuration[rouge][i];\\n    }\\n    return (names_, uri_, challenge_);\\n  }\\n\\n  // Function to get all local state for a roadmap\\n  function getFeaturesState(\\n    Rouge rouge,\\n    uint256 max\\n  )\\n    internal\\n    view\\n    returns (\\n      bool[] memory open,\\n      uint256[] memory claimedAt,\\n      uint16[] memory claimedThreshold\\n    )\\n  {\\n    bool[] memory open_ = new bool[](max);\\n    uint256[] memory at_ = new uint256[](max);\\n    uint16[] memory threshold_ = new uint16[](max);\\n\\n    for (uint16 i = 0; i < max; i++) {\\n      open_[i] = rouge.isEnabled(rouge.acquire.selector, i);\\n      at_[i] = _claimedAt[rouge][i];\\n      threshold_[i] = _claimedThreshold[rouge][i];\\n    }\\n    return (open_, at_, threshold_);\\n  }\\n\\n  // Shortcut to get all infos we need onchain - aggregate Rouge instances + Roadfund\\n  function getInfos(\\n    Rouge rouge\\n  )\\n    public\\n    view\\n    returns (\\n      address creator,\\n      string memory uri,\\n      Rouge.Channel[] memory channels,\\n      address penaltiesRecipient,\\n      bool[] memory open,\\n      string[] memory names,\\n      string[] memory featureURI,\\n      uint256[] memory challenge,\\n      uint256[] memory claimedAt,\\n      uint16[] memory claimedThreshold\\n    )\\n  {\\n    creator = _creator[rouge];\\n    (uri, channels, ) = rouge.getInfos();\\n    penaltiesRecipient = _penaltiesRecipient[rouge];\\n\\n    (names, featureURI, challenge) = getFeatures(rouge, channels.length);\\n    (open, claimedAt, claimedThreshold) = getFeaturesState(\\n      rouge,\\n      channels.length\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x0022874ba08192dabe0986c22021b355f96dfc4ee92c6d4753ca1c9cbcf02fd2\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101295760003560e01c8063715018a6116100a5578063ce01c9fc11610074578063eadc86d111610059578063eadc86d114610327578063ecddb95f1461035d578063f2fde38b1461037257600080fd5b8063ce01c9fc146102d4578063ea99d7f11461030757600080fd5b8063715018a61461026e5780638da5cb5b14610283578063bab4c749146102a1578063c5cc6b6a146102b457600080fd5b806329e41da5116100fc5780633cf024ba116100e15780633cf024ba1461021257806346d51f5b146102255780635634f2061461024557600080fd5b806329e41da5146101c5578063361af6aa146101f257600080fd5b8063071c67591461012e5780631f834067146101565780632061afea1461018e57806325585a4c146101b0575b600080fd5b34801561013a57600080fd5b50610143600c81565b6040519081526020015b60405180910390f35b34801561016257600080fd5b50600254610176906001600160a01b031681565b6040516001600160a01b03909116815260200161014d565b34801561019a57600080fd5b506101ae6101a9366004611e55565b610392565b005b3480156101bc57600080fd5b50610143609681565b3480156101d157600080fd5b506101db60001981565b60405165ffffffffffff909116815260200161014d565b3480156101fe57600080fd5b506101ae61020d366004611ef4565b61066c565b6101ae610220366004611f29565b610990565b34801561023157600080fd5b506101ae610240366004611f6e565b610ae6565b34801561025157600080fd5b5061025b60001981565b60405161ffff909116815260200161014d565b34801561027a57600080fd5b506101ae610b34565b34801561028f57600080fd5b506000546001600160a01b0316610176565b6101ae6102af366004611ef4565b610b48565b3480156102c057600080fd5b50600154610176906001600160a01b031681565b3480156102e057600080fd5b50600154600254604080516001600160a01b0393841681529290911660208301520161014d565b34801561031357600080fd5b50610176610322366004611fa7565b611030565b34801561033357600080fd5b50610347610342366004611fee565b6112f9565b60405161014d9a999897969594939291906121c7565b34801561036957600080fd5b50610143602181565b34801561037e57600080fd5b506101ae61038d366004611fee565b611400565b6000856001600160a01b031663643d6dc06040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103fa91908101906123f1565b509150506001600160a01b0386166323ec2bbe3360405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03909116600482015263ea99d7f160e01b602482015261ffff6044820152606401602060405180830381865afa15801561047f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a391906124b7565b6104ac57600080fd5b604080516001808252818301909252600091816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816104c35750506040805160a08101825265ffffffffffff81526000602082018190529181018290526060810182905260808101879052825192935091839190610542576105426124d9565b60209081029190910101526040517f5c3731370000000000000000000000000000000000000000000000000000000081526001600160a01b03881690635c373137906105929084906004016124ef565b600060405180830381600087803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b505050506105d18783516001611490565b6001600160a01b0387166000908152600660209081526040808320855161ffff1684529091529020610603878261258a565b506001600160a01b0387166000908152600760209081526040808320855161ffff1684529091529020610636868261258a565b50506001600160a01b039095166000908152600860209081526040808320975161ffff1683529690529490942093909355505050565b6001600160a01b0382166323ec2bbe3360405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03909116600482015263ea99d7f160e01b602482015261ffff6044820152606401602060405180830381865afa1580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071191906124b7565b6107625760405162461bcd60e51b815260206004820152600b60248201527f6e6f742063726561746f7200000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166000908152600a6020908152604080832061ffff8516845290915290205415806107db57506001600160a01b038216600081815260086020908152604080832061ffff861680855290835281842054948452600a83528184209084529091529020546107d89042612660565b10155b6108275760405162461bcd60e51b815260206004820152600d60248201527f6e6f7420636c61696d61626c65000000000000000000000000000000000000006044820152606401610759565b6001600160a01b0382166000818152600a6020908152604080832061ffff808716808652918452828520429055948452600b83528184209084529091529020541615610941576001600160a01b0382166000818152600b6020908152604080832061ffff80871680865291845282852054958552600984528285209185529252909120546064926021926108bf929181169116612673565b6108c99190612695565b6108d391906126d1565b6001600160a01b0383166000908152600b6020908152604080832061ffff80871685529252909120546109079291166126f2565b6001600160a01b03929092166000908152600b6020908152604080832061ffff94851684529091529020805461ffff191691909216179055565b6001600160a01b0391909116600081815260096020908152604080832061ffff95861680855290835281842054948452600b83528184209084529091529020805461ffff191691909216179055565b604080516001808252818301909252600091816020015b60408051608081018252600080825260208083018290529282015260608082015282526000199092019101816109a75750506040805160808101825261ffff86811682528516602080830191909152600082840181905283518181529182019093526060820152825192935091839190610a2357610a236124d9565b6020026020010181905250836001600160a01b0316637d394b5b34836040518363ffffffff1660e01b8152600401610a5b919061270d565b6000604051808303818588803b158015610a7457600080fd5b505af1158015610a88573d6000803e3d6000fd5b5050506001600160a01b038616600090815260096020908152604080832061ffff808a168552925282208054879550909350610ac6918591166126f2565b92506101000a81548161ffff021916908361ffff16021790555050505050565b610aee611606565b600180546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560028054929093169116179055565b610b3c611606565b610b466000611660565b565b6001600160a01b0382166323ec2bbe3360405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b03909116600482015263ea99d7f160e01b602482015261ffff6044820152606401602060405180830381865afa158015610bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bed91906124b7565b610bf657600080fd5b6001600160a01b0382166000908152600a6020908152604080832061ffff85168452909152902054610c6a5760405162461bcd60e51b815260206004820152600b60248201527f6e6f7420636c61696d65640000000000000000000000000000000000000000006044820152606401610759565b6001600160a01b038216600081815260086020908152604080832061ffff861680855290835281842054948452600a8352818420908452909152902054610cb19042612660565b1015610cff5760405162461bcd60e51b815260206004820152600860248201527f6e6f742074696d650000000000000000000000000000000000000000000000006044820152606401610759565b6001600160a01b0382166000818152600b6020908152604080832061ffff808716808652918452828520549585526009845282852091855292528220549192610d4c929082169116612673565b6001600160a01b038416600090815260096020908152604080832061ffff8088168552925290912054919250161580610dc857506001600160a01b038316600090815260096020908152604080832061ffff8087168552925290912054600c9116610db8836064612695565b610dc291906126d1565b61ffff16105b610e145760405162461bcd60e51b815260206004820152600960248201527f636f6e74657374656400000000000000000000000000000000000000000000006044820152606401610759565b6000836001600160a01b031663643d6dc06040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e54573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e7c91908101906123f1565b50915050808361ffff1681518110610e9657610e966124d9565b602002602001015160800151606460968461ffff16610eb59190612808565b610ebf919061281f565b610ec99190612808565b341015610f185760405162461bcd60e51b815260206004820152600e60248201527f70656e616c747920756e706169640000000000000000000000000000000000006044820152606401610759565b3415610f43576001600160a01b03808516600090815260056020526040902054610f439116346116c8565b6001600160a01b03841663c74b197c33838661ffff1681518110610f6957610f696124d9565b602090810291909101810151608001516001600160a01b038916600090815260098352604080822061ffff808c1684529452902054610fa89216612808565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561100657600080fd5b505af115801561101a573d6000803e3d6000fd5b5050505061102a84846000611490565b50505050565b60006001600360008282546110459190612833565b90915550506040805160018082528183019092526000916020808301908036833701905050905060001981600081518110611082576110826124d9565b61ffff9290921660209283029190910190910152604080516001808252818301909252600091816020015b604080516080810182526000808252602080830182905260609383018490529282015282526000199092019101816110ad57905050905060405180608001604052806110f63390565b6001600160a01b0316815263ea99d7f160e01b602082015260408101849052600160609091015281518290600090611130576111306124d9565b60209081029190910101526001546002546001600160a01b0391821691631688f0b991167fdd901cae00000000000000000000000000000000000000000000000000000000308960006040519080825280602002602001820160405280156111d257816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816111975790505b50876040516020016111e794939291906128e4565b60408051601f19818403018152908290526112059291602001612937565b60408051601f19818403018152908290526003547fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16835261124f939260040161297f565b6020604051808303816000875af115801561126e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129291906129b1565b9250336001600160a01b03808516600090815260046020908152604080832080549585167fffffffffffffffffffffffff00000000000000000000000000000000000000009687161790556005909152902080549187169190921617905550505b92915050565b6001600160a01b0380821660008181526004602081905260408083205481517f643d6dc0000000000000000000000000000000000000000000000000000000008152915195169460609485949385938493849384938493849363643d6dc092828101928c9291908290030181865afa158015611379573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113a191908101906123f1565b506001600160a01b03808e166000908152600560205260409020548251939c50919a501697506113d2908c906117e6565b8a5192975090955093506113e7908c90611aee565b8093508194508298505050509193959799509193959799565b611408611606565b6001600160a01b0381166114845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610759565b61148d81611660565b50565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106114c6576114c66124d9565b61ffff9290921660209283029190910190910152604080516001808252818301909252600091816020015b604080516080810182526000808252602080830182905260609383018490529282015282526000199092019101816114f15750506040805160808101825260008082527f7d394b5b000000000000000000000000000000000000000000000000000000006020830152918101859052851515606082015282519293509183919061157d5761157d6124d9565b60209081029190910101526040517fdf0a31370000000000000000000000000000000000000000000000000000000081526001600160a01b0386169063df0a3137906115cd9084906004016129ce565b600060405180830381600087803b1580156115e757600080fd5b505af11580156115fb573d6000803e3d6000fd5b505050505050505050565b6000546001600160a01b03163314610b465760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610759565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b804710156117185760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610759565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611765576040519150601f19603f3d011682016040523d82523d6000602084013e61176a565b606091505b50509050806117e15760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610759565b505050565b606080606060008467ffffffffffffffff81111561180657611806611d67565b60405190808252806020026020018201604052801561183957816020015b60608152602001906001900390816118245790505b50905060008567ffffffffffffffff81111561185757611857611d67565b60405190808252806020026020018201604052801561188a57816020015b60608152602001906001900390816118755790505b50905060008667ffffffffffffffff8111156118a8576118a8611d67565b6040519080825280602002602001820160405280156118d1578160200160208202803683370190505b50905060005b878161ffff161015611adf576001600160a01b038916600090815260066020908152604080832061ffff851684529091529020805461191590612502565b80601f016020809104026020016040519081016040528092919081815260200182805461194190612502565b801561198e5780601f106119635761010080835404028352916020019161198e565b820191906000526020600020905b81548152906001019060200180831161197157829003601f168201915b5050505050848261ffff16815181106119a9576119a96124d9565b6020908102919091018101919091526001600160a01b038a16600090815260078252604080822061ffff851683529092522080546119e690612502565b80601f0160208091040260200160405190810160405280929190818152602001828054611a1290612502565b8015611a5f5780601f10611a3457610100808354040283529160200191611a5f565b820191906000526020600020905b815481529060010190602001808311611a4257829003601f168201915b5050505050838261ffff1681518110611a7a57611a7a6124d9565b6020908102919091018101919091526001600160a01b038a16600090815260088252604080822061ffff851680845293529020548351909184918110611ac257611ac26124d9565b602090810291909101015280611ad7816129e1565b9150506118d7565b50919450925090509250925092565b606080606060008467ffffffffffffffff811115611b0e57611b0e611d67565b604051908082528060200260200182016040528015611b37578160200160208202803683370190505b50905060008567ffffffffffffffff811115611b5557611b55611d67565b604051908082528060200260200182016040528015611b7e578160200160208202803683370190505b50905060008667ffffffffffffffff811115611b9c57611b9c611d67565b604051908082528060200260200182016040528015611bc5578160200160208202803683370190505b50905060005b878161ffff161015611adf576040517feedff2c00000000000000000000000000000000000000000000000000000000081527f7d394b5b00000000000000000000000000000000000000000000000000000000600482015261ffff821660248201526001600160a01b038a169063eedff2c090604401602060405180830381865afa158015611c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8291906124b7565b848261ffff1681518110611c9857611c986124d9565b9115156020928302919091018201526001600160a01b038a166000908152600a8252604080822061ffff851680845293529020548451909185918110611ce057611ce06124d9565b6020908102919091018101919091526001600160a01b038a166000908152600b8252604080822061ffff8086168085529190945291205484519216918491908110611d2d57611d2d6124d9565b61ffff9092166020928302919091019091015280611d4a816129e1565b915050611bcb565b6001600160a01b038116811461148d57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715611da057611da0611d67565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611dcf57611dcf611d67565b604052919050565b600067ffffffffffffffff821115611df157611df1611d67565b50601f01601f191660200190565b600082601f830112611e1057600080fd5b8135611e23611e1e82611dd7565b611da6565b818152846020838601011115611e3857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611e6d57600080fd5b8535611e7881611d52565b9450602086013567ffffffffffffffff80821115611e9557600080fd5b611ea189838a01611dff565b95506040880135915080821115611eb757600080fd5b50611ec488828901611dff565b9598949750949560608101359550608001359392505050565b803561ffff81168114611eef57600080fd5b919050565b60008060408385031215611f0757600080fd5b8235611f1281611d52565b9150611f2060208401611edd565b90509250929050565b600080600060608486031215611f3e57600080fd5b8335611f4981611d52565b9250611f5760208501611edd565b9150611f6560408501611edd565b90509250925092565b60008060408385031215611f8157600080fd5b8235611f8c81611d52565b91506020830135611f9c81611d52565b809150509250929050565b60008060408385031215611fba57600080fd5b823567ffffffffffffffff811115611fd157600080fd5b611fdd85828601611dff565b9250506020830135611f9c81611d52565b60006020828403121561200057600080fd5b813561200b81611d52565b9392505050565b60005b8381101561202d578181015183820152602001612015565b50506000910152565b6000815180845261204e816020860160208601612012565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b838110156120d4578151805165ffffffffffff9081168952848201518116858a0152604080830151909116908901526060808201516001600160a01b0316908901526080908101519088015260a09096019590820190600101612076565b509495945050505050565b600081518084526020808501945080840160005b838110156120d45781511515875295820195908201906001016120f3565b6000815180845260208085019450848260051b860182860160005b85811015612156578383038952612144838351612036565b9885019892509084019060010161212c565b5090979650505050505050565b600081518084526020808501945080840160005b838110156120d457815187529582019590820190600101612177565b600081518084526020808501945080840160005b838110156120d457815161ffff16875295820195908201906001016121a7565b60006101406001600160a01b038d1683528060208401526121ea8184018d612036565b905082810360408401526121fe818c612062565b6001600160a01b038b16606085015290508281036080840152612221818a6120df565b905082810360a08401526122358189612111565b905082810360c08401526122498188612111565b905082810360e084015261225d8187612163565b90508281036101008401526122728186612163565b90508281036101208401526122878185612193565b9d9c50505050505050505050505050565b600067ffffffffffffffff8211156122b2576122b2611d67565b5060051b60200190565b805165ffffffffffff81168114611eef57600080fd5b600082601f8301126122e357600080fd5b815160206122f3611e1e83612298565b82815260a0928302850182019282820191908785111561231257600080fd5b8387015b858110156121565781818a03121561232e5760008081fd5b612336611d7d565b61233f826122bc565b815261234c8683016122bc565b86820152604061235d8184016122bc565b9082015260608281015161237081611d52565b90820152608082810151908201528452928401928101612316565b600082601f83011261239c57600080fd5b815160206123ac611e1e83612298565b82815260059290921b840181019181810190868411156123cb57600080fd5b8286015b848110156123e657805183529183019183016123cf565b509695505050505050565b60008060006060848603121561240657600080fd5b835167ffffffffffffffff8082111561241e57600080fd5b818601915086601f83011261243257600080fd5b8151612440611e1e82611dd7565b81815288602083860101111561245557600080fd5b612466826020830160208701612012565b60208801519096509250508082111561247e57600080fd5b61248a878388016122d2565b935060408601519150808211156124a057600080fd5b506124ad8682870161238b565b9150509250925092565b6000602082840312156124c957600080fd5b8151801515811461200b57600080fd5b634e487b7160e01b600052603260045260246000fd5b60208152600061200b6020830184612062565b600181811c9082168061251657607f821691505b60208210810361253657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156117e157600081815260208120601f850160051c810160208610156125635750805b601f850160051c820191505b818110156125825782815560010161256f565b505050505050565b815167ffffffffffffffff8111156125a4576125a4611d67565b6125b8816125b28454612502565b8461253c565b602080601f8311600181146125ed57600084156125d55750858301515b600019600386901b1c1916600185901b178555612582565b600085815260208120601f198616915b8281101561261c578886015182559484019460019091019084016125fd565b508582101561263a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b818103818111156112f3576112f361264a565b61ffff82811682821603908082111561268e5761268e61264a565b5092915050565b61ffff8181168382160280821691908281146126b3576126b361264a565b505092915050565b634e487b7160e01b600052601260045260246000fd5b600061ffff808416806126e6576126e66126bb565b92169190910492915050565b61ffff81811683821601908082111561268e5761268e61264a565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156127f9578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00186528251805161ffff908116865289820151168986015287810151888601526060908101516080918601829052805191860182905289019060a086019084905b808210156127e45783517fffffffffffffffffffffffffffffffff00000000000000000000000000000000168352928b0192918b0191600191909101906127a2565b50509689019694505091870191600101612735565b50919998505050505050505050565b80820281158282048414176112f3576112f361264a565b60008261282e5761282e6126bb565b500490565b808201808211156112f3576112f361264a565b6000815180845260208085019450848260051b860182860160005b85811015612156578383038952815160806001600160a01b0382511685527fffffffff0000000000000000000000000000000000000000000000000000000087830151168786015260408083015182828801526128c083880182612193565b60609485015115159790940196909652505098850198925090840190600101612861565b6001600160a01b03851681526080602082015260006129066080830186612036565b82810360408401526129188186612062565b9050828103606084015261292c8185612846565b979650505050505050565b7fffffffff000000000000000000000000000000000000000000000000000000008316815260008251612971816004850160208701612012565b919091016004019392505050565b6001600160a01b03841681526060602082015260006129a16060830185612036565b9050826040830152949350505050565b6000602082840312156129c357600080fd5b815161200b81611d52565b60208152600061200b6020830184612846565b600061ffff8083168181036129f8576129f861264a565b600101939250505056fea2646970667358221220d6582c11b2a57ccedb95df440786326bb007e97f525c6381749c56eb98b112bb64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Roadfund.sol:Roadfund",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4901,
        "contract": "contracts/Roadfund.sol:Roadfund",
        "label": "_factory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4903,
        "contract": "contracts/Roadfund.sol:Roadfund",
        "label": "_singleton",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4975,
        "contract": "contracts/Roadfund.sol:Roadfund",
        "label": "_nonce",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4980,
        "contract": "contracts/Roadfund.sol:Roadfund",
        "label": "_creator",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(Rouge)4337,t_address_payable)"
      },
      {
        "astId": 4985,
        "contract": "contracts/Roadfund.sol:Roadfund",
        "label": "_penaltiesRecipient",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_contract(Rouge)4337,t_address_payable)"
      },
      {
        "astId": 5175,
        "contract": "contracts/Roadfund.sol:Roadfund",
        "label": "_featureName",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_contract(Rouge)4337,t_mapping(t_uint16,t_string_storage))"
      },
      {
        "astId": 5182,
        "contract": "contracts/Roadfund.sol:Roadfund",
        "label": "_featureURI",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_contract(Rouge)4337,t_mapping(t_uint16,t_string_storage))"
      },
      {
        "astId": 5189,
        "contract": "contracts/Roadfund.sol:Roadfund",
        "label": "_featureChallengeDuration",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_contract(Rouge)4337,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 5314,
        "contract": "contracts/Roadfund.sol:Roadfund",
        "label": "_pledges",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_contract(Rouge)4337,t_mapping(t_uint16,t_uint16))"
      },
      {
        "astId": 5378,
        "contract": "contracts/Roadfund.sol:Roadfund",
        "label": "_claimedAt",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_contract(Rouge)4337,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 5385,
        "contract": "contracts/Roadfund.sol:Roadfund",
        "label": "_claimedThreshold",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_contract(Rouge)4337,t_mapping(t_uint16,t_uint16))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(Rouge)4337": {
        "encoding": "inplace",
        "label": "contract Rouge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(Rouge)4337,t_address_payable)": {
        "encoding": "mapping",
        "key": "t_contract(Rouge)4337",
        "label": "mapping(contract Rouge => address payable)",
        "numberOfBytes": "32",
        "value": "t_address_payable"
      },
      "t_mapping(t_contract(Rouge)4337,t_mapping(t_uint16,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_contract(Rouge)4337",
        "label": "mapping(contract Rouge => mapping(uint16 => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_string_storage)"
      },
      "t_mapping(t_contract(Rouge)4337,t_mapping(t_uint16,t_uint16))": {
        "encoding": "mapping",
        "key": "t_contract(Rouge)4337",
        "label": "mapping(contract Rouge => mapping(uint16 => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint16)"
      },
      "t_mapping(t_contract(Rouge)4337,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(Rouge)4337",
        "label": "mapping(contract Rouge => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint16,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
